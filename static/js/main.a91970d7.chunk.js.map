{"version":3,"sources":["webpages/useChat.js","webpages/chatRoom.js","webpages/home.js","webpages/index.js","App.js","reportWebVitals.js","index.js"],"names":["socketIOClient","require","NEW_CHAT_MESSAGE_EVENT","useChat","useState","messages","setMessages","socketRef","useRef","useEffect","current","connect","on","message","incomingMessage","ownedByCurrentUser","senderId","id","disconnect","sendMessage","messageBody","emit","date","Date","now","toString","name","ChatRoom","props","React","newMessage","setNewMessage","className","map","i","body","value","onChange","event","target","placeholder","onClick","DefaultIcon","L","icon","iconUrl","shadowUrl","iconShadow","Marker","prototype","options","Home","error","style","display","flexDirection","flexWrap","width","flexBasis","flex","margin","height","boxShadow","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","position","Popup","Webpages","exact","path","component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a91970d7.chunk.js","sourcesContent":["import { useEffect, useState, useRef } from \"react\";\r\nconst socketIOClient = require(\"socket.io-client\");\r\nconst SOCKET_SERVER_URL =\r\n  \"ws://tarea-3-websocket.2021-2.tallerdeintegracion.cl\";\r\n\r\nconst NEW_CHAT_MESSAGE_EVENT = \"CHAT\"; // Name of the event\r\n\r\nconst useChat = () => {\r\n  const [messages, setMessages] = useState([]); // Sent and received messages\r\n  const socketRef = useRef();\r\n\r\n  useEffect(() => {\r\n    socketRef.current = socketIOClient.connect(SOCKET_SERVER_URL);\r\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, (message) => {\r\n      const incomingMessage = {\r\n        ...message,\r\n        ownedByCurrentUser: message.senderId === socketRef.current.id,\r\n      };\r\n      setMessages((messages) => [...messages, incomingMessage]);\r\n    });\r\n\r\n    // Destroys the socket reference\r\n    // when the connection is closed\r\n    return () => {\r\n      socketRef.current.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  const sendMessage = (messageBody) => {\r\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\r\n      date: Date.now().toString(),\r\n      message: messageBody,\r\n      name: socketRef.current.id,\r\n    });\r\n  };\r\n\r\n  return { messages, sendMessage };\r\n};\r\n\r\nexport default useChat;\r\n","import React from \"react\";\r\nimport useChat from \"./useChat\";\r\nimport \"./chatRoom.css\";\r\n\r\nconst ChatRoom = (props) => {\r\n  const { messages, sendMessage } = useChat(); // Creates a websocket and manages messaging\r\n  const [newMessage, setNewMessage] = React.useState(\"\"); // Message to be sent\r\n\r\n  const handleNewMessageChange = (event) => {\r\n    setNewMessage(event.target.value);\r\n  };\r\n\r\n  const handleSendMessage = () => {\r\n    sendMessage(newMessage);\r\n    setNewMessage(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-room-container\">\r\n      <div className=\"messages-container\">\r\n        <ol className=\"messages-list\">\r\n          {messages.map((message, i) => (\r\n            <li\r\n              key={i}\r\n              className={`message-item ${\r\n                message.ownedByCurrentUser ? \"my-message\" : \"received-message\"\r\n              }`}\r\n            >\r\n              {message.body}\r\n            </li>\r\n          ))}\r\n        </ol>\r\n      </div>\r\n      <textarea\r\n        value={newMessage}\r\n        onChange={handleNewMessageChange}\r\n        placeholder=\"Write message...\"\r\n        className=\"new-message-input-field\"\r\n      />\r\n      <button onClick={handleSendMessage} className=\"send-message-button\">\r\n        Send\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatRoom;\r\n","import React, { useState } from \"react\";\r\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\r\nimport ChatRoom from \"./chatRoom\";\r\n\r\nimport L from \"leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\nimport icon from \"leaflet/dist/images/marker-icon.png\";\r\nimport iconShadow from \"leaflet/dist/images/marker-shadow.png\";\r\n\r\nlet DefaultIcon = L.icon({\r\n  iconUrl: icon,\r\n  shadowUrl: iconShadow,\r\n});\r\n\r\nL.Marker.prototype.options.icon = DefaultIcon;\r\n\r\nconst Home = (props) => {\r\n  const [error] = useState(null);\r\n\r\n  if (error) {\r\n    return <div>Error: {error.message}</div>;\r\n  } else {\r\n    return (\r\n      <div>\r\n        <hr></hr>\r\n        <h1>App de flota de camiones</h1>\r\n        <hr></hr>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            flexWrap: \"wrap\",\r\n            width: \"100%\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              flexBasis: \"100%\",\r\n              flex: 1,\r\n              margin: 8,\r\n            }}\r\n          >\r\n            <div style={{ display: \"table-row\" }}>\r\n              <h3>Mapa</h3>\r\n              <div\r\n                style={{\r\n                  width: \"100%\",\r\n                  height: \"400px\",\r\n                  boxShadow: \"5px 5px 5px #888\",\r\n                }}\r\n              >\r\n                <MapContainer\r\n                  center={[51.505, -0.09]}\r\n                  zoom={13}\r\n                  scrollWheelZoom={false}\r\n                  style={{ height: \"400px\" }}\r\n                >\r\n                  <TileLayer\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                  />\r\n                  <Marker position={[51.505, -0.09]}>\r\n                    <Popup>\r\n                      A pretty CSS3 popup. <br /> Easily customizable.\r\n                    </Popup>\r\n                  </Marker>\r\n                </MapContainer>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              flexBasis: \"100%\",\r\n              flex: 1,\r\n              margin: 8,\r\n            }}\r\n          >\r\n            <div style={{ display: \"table-row\" }}>\r\n              <h3>Chat</h3>\r\n              <ChatRoom></ChatRoom>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        Y aca abajo lo de los estados\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Home from \"./home\";\r\n\r\nconst Webpages = () => {\r\n  return (\r\n    <div>\r\n      <Router>\r\n        <Route exact path=\"/\" component={Home} />\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\nexport default Webpages;\r\n","import React from 'react';\nimport Webpages from './webpages';\nfunction App() {\n  return (\n    <div>\n      <Webpages />\n    </div>\n  );\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"leaflet/dist/leaflet.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}